---
title: "Daten visualisieren mit ggplot2"
format:
  html:
    embed-resources: true
editor: visual
editor_options: 
  chunk_output_type: console
---

## R-Pakete laden & Daten importieren

Wir laden die notwendigen Pakete für die Datenvisualisierung und den Pinguine-Datensatz.

```{r}
library(ggplot2)
library(ggthemes)
library(ggridges)
library(palmerpenguins)
```

## Daten erkunden

Schauen wir uns die Struktur und die ersten Zeilen des Pinguine-Datensatzes an.

```{r}
head(penguins)
str(penguins)
```

## Daten visualisieren mit ggplot2

Wir werden Schritt für Schritt Visualisierungen mit der Grammatik der Grafiken von ggplot2 erstellen.

### Funktionen und Argumente

Die grundlegenden Bausteine von ggplot2 sind Funktionen und ihre Argumente.

-   Funktionen: `ggplot()`, `aes()`, `geom_point()`
-   Argumente: data, mapping, color

```{r}
ggplot(data = penguins,
       mapping = aes(x = flipper_length_mm, 
                     y = body_mass_g)) +
  geom_point()
```

### Variablen visuellen Eigenschaften zuordnen (EN: aesthetic mapping)

Weise Datenvariablen visuellen Eigenschaften wie Position, Farbe und Form zu.

-   Optionen: x, y, color, shape, size, alpha

```{r}
ggplot(data = penguins,
       mapping = aes(x = flipper_length_mm,
                     y = body_mass_g,
                     color = species,
                     shape = species)) +
  geom_point()
```

### Visuelle Eigenschaften verändern

Passe das Aussehen mit festen Werten anstatt mit Datenzuweisungen an.

```{r}
ggplot(data = penguins,
       mapping = aes(x = flipper_length_mm,
                     y = body_mass_g,
                     color = species,
                     shape = species)) +
  geom_point(size = 5, alpha = 0.7)
```

### Farbskala anpassen

Ändere die Standard-Farbpaletten, um Zugänglichkeit und Ästhetik zu verbessern.

```{r}
ggplot(data = penguins,
       mapping = aes(x = flipper_length_mm,
                     y = body_mass_g,
                     color = species,
                     shape = species)) +
  geom_point(size = 5, alpha = 0.7) +
  scale_color_colorblind()

```

```{r}

ggplot(data = penguins,
       mapping = aes(x = flipper_length_mm,
                     y = body_mass_g,
                     color = species,
                     shape = species)) +
  geom_point(size = 5, alpha = 0.7) +
  scale_color_manual(values = c("red", "blue", "green"))

```

### Facetten

Erstelle kleine Vielfache, indem du die Daten in Panels aufteilst. Einige Codes in diesem Abschnitt sind bereits vorbereitet, wir werden weitere Codes zusammen hinzufügen.

Tastaturkürzel für die Tilde (\~):

-   CH-Tastatur Windows/Mac: Alt/Option + -

```{r}
ggplot(data = penguins,
       mapping = aes(x = flipper_length_mm,
                     y = body_mass_g)) +
  geom_point() +
  facet_grid(species ~ island)
```

```{r}
ggplot(data = penguins,
       mapping = aes(x = flipper_length_mm,
                     y = body_mass_g)) +
  geom_point() +
  facet_wrap(~species)
```

### Themes

Wende vorgefertigte Themes an, um das Gesamtbild deiner Plots zu ändern. Einige Codes in diesem Abschnitt sind bereits vorbereitet, wir werden weitere Codes zusammen hinzufügen.

```{r}

ggplot(data = penguins,
       mapping = aes(x = flipper_length_mm,
                     y = body_mass_g,
                     color = species,
                     shape = species)) +
  geom_point(size = 5, alpha = 0.7) +
  scale_color_colorblind() +
  theme_minimal()

```

## Visualisierung von Verteilungen

Erkunde, wie Daten über verschiedene Kategorien und Werte verteilt sind.

### Kategorische Variablen

Verwende Balkendiagramme, um Häufigkeiten oder Anteile kategorischer Daten zu zeigen.

```{r}
ggplot(data = penguins,
       mapping = aes(x = species)) +
  geom_bar()
```

```{r}
ggplot(data = penguins,
       mapping = aes(x = species,
                     fill = island)) +
  geom_bar()
```

### Numerische kontinuierliche Variablen

Visualisiere die Verteilung kontinuierlicher Daten mit Histogrammen und Dichteplots. Der Code in diesem Abschnitt ist bereits vorbereitet, wir werden die Code-Blöcke gemeinsam durchgehen.

```{r}
ggplot(data = penguins,
       mapping = aes(x = body_mass_g)) +
  geom_histogram()
```

```{r}
ggplot(data = penguins,
       mapping = aes(x = body_mass_g,
                     fill = species)) +
  geom_histogram()
```

```{r}
ggplot(data = penguins,
       mapping = aes(x = body_mass_g,
                     fill = species)) +
  geom_density()
```

```{r}
ggplot(data = penguins,
       mapping = aes(x = body_mass_g,
                     y = species,
                     fill = species)) +
  geom_density_ridges()
```

## Daten kommunizieren

Teile deine Analyse, indem du dieses Dokument in eine eigenständige HTML-Datei renderst.

-   Das Dokument in das HTML-Format umwandeln (Render) und eventuelle Fehler beheben.
